import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven-publish'
    id 'antlr'
}

group 'de.fearnixx'
version '1.2.0'
def projectVersion = project.version

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
def isRelease = true

if (project.hasProperty("preRelease")) {
    apply from: './pre-release.gradle'
    def tag = project.ext.getPreReleaseTag()
    def i = tag.substring(tag.lastIndexOf('.') + 1)

    projectVersion += "-rc." + i

} else if (!project.hasProperty('release')) {
    isRelease = false
    projectVersion += '-SNAPSHOT'
}

println "Using project version: $projectVersion"
version projectVersion

project.ext {
    artifact = 'jeakbot'
}

repositories {
    mavenLocal()
    maven {
        url uri('https://nexus.fearnixx.de/repository/maven-public')
    }
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
        resources {
            srcDir 'src/api/resources'
        }
    }

    main {
        java {
            srcDirs = ['src/api/java', 'src/main/java', 'build/generated-src/antlr/main']
        }
        resources {
            srcDirs = ['src/api/resources', 'src/main/resources']
        }
    }
    
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

dependencies {
    apiCompile 'de.mlessmann:confort-api:1.1.0-rc.2'
    apiCompile 'org.hibernate:hibernate-core:5.4.24.Final'
    apiCompile 'org.slf4j:slf4j-api:1.7.30'

    compile sourceSets.api.output

    compile 'de.mlessmann:confort:1.1.0-rc.2'
    compile 'io.github.classgraph:classgraph:4.8.98'
    compile 'org.hibernate:hibernate-core:5.4.24.Final'
    compile 'org.slf4j:slf4j-api:1.7.29'
    compile 'com.zaxxer:HikariCP:3.4.5'
    compile 'com.sun.mail:jakarta.mail:2.0.0'
    compile 'com.sparkjava:spark-core:2.9.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.12.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.12.1'
    compile 'com.jcraft:jsch:0.1.55'
    compile 'org.antlr:antlr4:4.7.2'
    antlr 'org.antlr:antlr4:4.7.2'

    compile 'com.github.marianobarrios:tls-channel:0.4.0'

    compile 'com.github.manevolent:ts3j:1.0'
    compile 'org.apache.commons:commons-lang3:3.11'
    compile 'net.tomp2p:opus-wrapper:1.4'
    compile 'com.sun.jna:jna:3.0.9'
    compile 'com.github.manevolent:ffmpeg4j:534e72e6e7'

    runtime 'org.antlr:antlr4-runtime:4.7.2'
    runtime 'org.apache.logging.log4j:log4j-api:2.14.0'
    runtime 'org.apache.logging.log4j:log4j-core:2.13.3'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'
    runtime 'mysql:mysql-connector-java:8.0.22'
    compile 'org.mariadb.jdbc:mariadb-java-client:2.7.0'
    runtime 'com.sun.mail:smtp:1.6.5'
    runtime 'com.sun.mail:dsn:2.0.0'

    testCompile 'junit:junit:4.13.1'
    testCompile 'org.hamcrest:hamcrest:2.2'
}

apply from: './antlr.gradle'
apply from: './artifacts.gradle'
apply from: './distribution.gradle'
apply from: './publication.gradle'

import org.apache.tools.ant.filters.ReplaceTokens
task processSourceReplacements(type: org.gradle.api.tasks.Sync) {
    from sourceSets.main.java
    inputs.property "version", version
    filter(ReplaceTokens, tokens: [
            VERSION: version
    ])
    into "$buildDir/src"
}

compileJava {
    if (isRelease) {
        source = processSourceReplacements.outputs
    }

    options.compilerArgs << "-Xlint:deprecation"
}

build {
    dependsOn publishToMavenLocal
}

wrapper {
    gradleVersion '6.7.1'
    distributionType = Wrapper.DistributionType.ALL
}
